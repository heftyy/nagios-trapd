#!/usr/bin/env python

import grp
import argparse
import os
import pwd
import signal
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from nagios.snmp.config import load_config
from nagios.snmp.log import log, configure_log
from nagios.snmp.log import events_log, configure_events_log
from nagios.snmp.server import NagiosTrapServer

if __name__ == "__main__":
    try:
        # Initialize Options
        parser = argparse.ArgumentParser()

        parser.add_argument("-c", "--configfile",
                            dest="configfile",
                            default=None,
                            help="config file")

        parser.add_argument("-f", "--foreground",
                            dest="foreground",
                            default=False,
                            action="store_true",
                            help="run in foreground")

        parser.add_argument("-p", "--pidfile",
                            dest="pidfile",
                            default=None,
                            help="pid file")

        parser.add_argument("-l", "--log-level",
                            dest="log_level",
                            default=None,
                            help="set log level")

        parser.add_argument("-V", "--version",
                            dest="version",
                            default=False,
                            action="store_true",
                            help="display the version and exit")

        # Parse Command Line Args
        options = parser.parse_args()

        # Display Version
        if options.version:
            print("version %s" % (get_version()))
            sys.exit(0)

        # Load Config
        if options.configfile is None:
            print >> sys.stderr, "ERROR: Must specify a config file"
            sys.exit(1)

        config = load_config(options.configfile)

        # Configure Log Level
        if options.log_level:
            config['daemon']['log_level'] = options.log_level

        # Configure Logging
        configure_log(log, config['daemon']['log_file'], config['daemon']['log_level'], options.foreground)

        # Configure Events Logging
        configure_events_log(events_log, config['dispatcher']['events_log'])

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit as e:
        raise SystemExit

    except Exception as e:
        import traceback

        sys.stderr.write("Unhandled exception: %s\n" % str(e))
        sys.stderr.write("traceback: %s" % traceback.format_exc())
        sys.exit(1)

    try:
        # PID MANAGEMENT
        if not options.foreground:
            # Initialize Pid file
            if not options.pidfile:
                options.pidfile = config['daemon']['pid_file']

            # Read existing pid file
            try:
                pf = open(options.pidfile, 'r')
                pid = int(pf.read().strip())
                pf.close()
            except IOError:
                pid = None

            # Check existing pid file
            if pid:
                # Check if pid is real
                if not os.path.exists("/".join(["/proc", str(pid), "cmdline"])):
                    # Pid is not real
                    os.unlink(options.pidfile)
                    pid = None
                    print >> sys.stderr, "WARN: Bogus pid file was found. I deleted it."
                else:
                    print >> sys.stderr, "ERROR: Pidfile exists. Server already running?"
                    sys.exit(1)

            # Get final GIDs
            gid = grp.getgrnam(config['daemon']['group']).gr_gid

            # Get final UID
            uid = pwd.getpwnam(config['daemon']['user']).pw_uid

            # Fix up pid permissions
            if not options.foreground:
                # Write pid file
                pid = str(os.getpid())
                try:
                    pf = open(options.pidfile, 'w+')
                except IOError as e:
                    print >> sys.stderr, "Failed to write PID file: %s" % e
                    sys.exit(1)
                pf.write("%s\n" % pid)
                pf.close()
                os.chown(options.pidfile, uid, gid)
                # Log
                log.debug("Wrote First PID file: %s" % options.pidfile)

            # Switch user to specified user/group if required
            try:
                if gid != -1 and os.getgid() != gid:
                    # Set GID
                    os.setgid(gid)

                if uid != -1 and os.getuid() != uid:
                    # Set UID
                    os.setuid(uid)
            except Exception as e:
                print >> sys.stderr, "ERROR: Failed to set UID/GID. %s" % e
                sys.exit(1)

            # Log
            log.info('Changed UID: %d (%s) GID: %d (%s).' % (
                os.getuid(),
                config['daemon']['user'],
                os.getgid(),
                config['daemon']['group']))

            # Double fork to serverize process
            log.info('Detaching Process.')

            # Fork 1
            try:
                pid = os.fork()
                if pid > 0:
                    # Exit first paren
                    sys.exit(0)
            except OSError as e:
                print >> sys.stderr, "Failed to fork process." % e
                sys.exit(1)
            # Decouple from parent environmen
            os.setsid()
            os.umask(0)
            # Fork 2
            try:
                pid = os.fork()
                if pid > 0:
                    # Exit second paren
                    sys.exit(0)
            except OSError as e:
                print >> sys.stderr, "Failed to fork process." % e
                sys.exit(1)

            # Close file descriptors so that we can detach
            sys.stdout.close()
            sys.stderr.close()
            sys.stdin.close()
            os.close(0)
            os.close(1)
            os.close(2)

            # Finish Initialize PID file
            if not options.foreground:
                # Write pid file
                pid = str(os.getpid())
                try:
                    pf = open(options.pidfile, 'w+')
                except IOError as e:
                    log.error("Failed to write child PID file: %s" % (e))
                    sys.exit(1)
                pf.write("%s\n" % pid)
                pf.close()
                # Log
                log.debug("Wrote child PID file: %s" % options.pidfile)

        else:
            log.info("Foreground mode enabled, skipping fork.")

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit as e:
        raise SystemExit

    except Exception as e:
        import traceback

        sys.stderr.write("Unhandled exception: %s" % str(e))
        sys.stderr.write("traceback: %s" % traceback.format_exc())
        sys.exit(1)

    # Initialize nagios Trap Server
    server = NagiosTrapServer(config)


    def sigint_handler(signum, frame):
        # Log
        log.info("Signal Received: %d" % (signum))
        # Stop Server
        server.stop()


    # Set the signal handlers
    signal.signal(signal.SIGINT, sigint_handler)
    signal.signal(signal.SIGTERM, sigint_handler)

    # Run server
    server.run()
